---
import BlogCard from '../../components/BlogCard.astro';
import BaseLayout from '../../layouts/MainLayout.astro';

function equalsIgnoringCase(text, other) {
    return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;
}

//STRAPI modules
import fetchApi from '../../lib/strapi';
import type Article from '../../interfaces/article'; 
export async function getStaticPaths() {
  const articles = await fetchApi<Article[]>({
   endpoint: 'articles', // el tipo de contenido a obtener
   wrappedByKey: 'data', // la clave para descomponer la respuesta
});
  let categoriesList = articles.map((category) => category.attributes.tags.split(",")).flat()
  categoriesList = categoriesList.map(category => category.toLocaleLowerCase().trim());
  const allCategories = [...new Set(categoriesList)];

  return allCategories.map((el) => ({ params:{ tag: el }, props:{posts: articles} }));
}

const { tag } = Astro.params;
const { posts } = Astro.props;

//Get post tags
let categoriesLista = posts.map((category) => category.attributes.tags.split(",")).flat()
categoriesLista = categoriesLista.map(category => category.toLocaleLowerCase().trim());

const filteredPosts = posts.filter((post) => {  
    let postTags = post.attributes.tags.split(",")
    postTags = postTags.map(items => items.toLowerCase().trim());

    const isThereTags = postTags.filter(tagsFiltered => tag === tagsFiltered)

    return isThereTags.length>0;
  });


---
<BaseLayout title={tag}>
  {filteredPosts.map((post) => 
  <BlogCard
      title = {post.attributes.title}
      category = {post.attributes.tags.split(",")}
      image = {post.attributes.coverurl}
      date = {post.attributes.publishedAt}
      views = {"1"}
      url_post = {"/blog/"+post.attributes.slug}
      pathname = {Astro.url.pathname}
  ></BlogCard>)} 
</BaseLayout> 